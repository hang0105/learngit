一、Git基本语法

语法	功能说明
git clone	克隆版本库
git pull	拉回远程版本库的提交
git push	推送至远程版本库
git add	添加至暂存区
git add–interactive	交互式添加
git apply	应用补丁
git am	应用邮件格式补丁
git annotate	同义词，等同于 git blame
git archive	文件归档打包
git bisect	二分查找
git blame	文件逐行追溯
git branch	分支管理
git cat-file	版本库对象研究工具
git checkout	检出到工作区、切换或创建分支
git cherry-pick	提交拣选
git citool	图形化提交，相当于 git gui 命令
git clean	清除工作区未跟踪文件
git commit	提交
git config	查询和修改配置
git describe	通过里程碑直观地显示提交ID
git diff	差异比较
git difftool	调用图形化差异比较工具
git fetch	获取远程版本库的提交
git format-patch	创建邮件格式的补丁文件。参见 git am 命令
git grep	文件内容搜索定位工具
git gui	基于Tcl/Tk的图形化工具，侧重提交等操作
git help	帮助
git init	版本库初始化
git init-db	同义词，等同于 git init
git log	显示提交日志
git merge	分支合并
git mergetool	图形化冲突解决
git mv	重命名
git rebase	分支变基
git rebase–interactive	交互式分支变基
git reflog	分支等引用变更记录管理
git remote	远程版本库管理
git repo-config	同义词，等同于 git config
git reset	重置改变分支“游标”指向
git rev-parse	将各种引用表示法转换为哈希值等
git revert	反转提交
git rm	删除文件
git show	显示各种类型的对象
git stage	同义词，等同于 git add
git stash	保存和恢复进度
git status	显示工作区文件状态
git tag	里程碑管理
二、Git查看某个文件修改历史

语法	功能说明
git blame 文件名	显示文件的每一行是在那个版本最后修改。（这个厉害）
git whatchanged 文件名	显示某个文件的每个版本提交信息：提交日期，提交人员，版本号，提交备注（没有修改细节）
git show 7aee80cd2rt42502143f379ec671917bc8456746（commit id）	显示某个版本的修改详情
git log –pretty=oneline	显示每个版本都修改了那些文件
git log –pretty=oneline 文件名	与上一样，不过每个修改版本都包含了
git show 7aee80cd2rt42502143f379ec671917bc8456747 文件名	显示某个版本的某个文件修改情况



由于windows不支持路径太长的文件夹和文件名，所以checkout会失败。

解决：
修改Git支持长路径。
打开git bash 输入 
git config --system core.longpaths true   或 git config --global core.longpaths true 

如何知道服务端这些记录是否存在过呢？在服务端仓库，执行如下命令：git fsck --full

$ git log --since="2018-05-17" >gitlog20170517.log
git config --global core.autocrlf input
git config --global core.longpaths true 

---防止全量覆盖
git config receive.denyNonFastForwards true




git branch develop_test
git push origin <local_branch_name>:<remote_branch_name> 例子：git push origin develop：develop
//提交分支数据到远程服务器

删除远程分支
git push origin --delete serverfix
git push origin :分支name


3）版本(tag)操作相关命令
查看版本：$ git tag
创建版本：$ git tag [name]
删除版本：$ git tag -d [name]
查看远程版本：$ git tag -r
创建远程版本(本地版本push到远程)：$ git push origin [name]
删除远程版本：$ git push origin :refs/tags/[name]
合并远程仓库的tag到本地：$ git pull origin --tags
上传本地tag到远程仓库：$ git push origin --tags
创建带注释的tag：$ git tag -a [name] -m 'yourMessage'
给指定的commit打标签
打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。
# 补打标签
$ git tag -a v0.1.1 9fbc3d0


查看远程库信息，使⽤git remote -v；
• 本地新建的分⽀如果不推送到远程，对其他⼈就是不可⻅的；
• 从本地推送分⽀，使⽤git push origin branch-name，如果推送失败，先⽤git pull抓
取远程的新提交；
• 在本地创建和远程分⽀对应的分⽀，使⽤git checkout -b branch-name origin/branchname，本地和远程分⽀的名称最好⼀致；
• 建⽴本地分⽀和远程分⽀的关联，使⽤git branch --set-upstream branch-name
origin/branch-name；
• 从远程抓取分⽀，使⽤git pull，如果有冲突，要先处理冲突。


配置别名
 git config --global alias.co checkout
 git config --global alias.ci commit
 git config --global alias.br branch
 
 
 Git branch 分支学习

- 列出当前所有分支
git branch <--merge> | <--no-merged>

- 创建分支
git branch <branch_name> {[SHA-1]/Tag}

- 切换分支
git checkout <branch_name>

- 新建并切换到该分支
git checkout -b <new branch-name>

-删除分支
git checkout -d <branch-name>

-合并分支
git merge <branch-name>

-分享分支
git push <远程仓库名> <分支名>
